回顾:
1.运算符:
  1)算术:+-*/%,++,--
  2)关系：>,<,>=,<=,==,!=
          boolean
  3)逻辑：&&(并且),||(或者),!(取反)
          boolean
  4)赋值：=,+=,-=,*=,/=,%=
  5)字符串连接：+
  6)三目/条件:boolean?数1:数2
2.分支结构:
  1)if:1条路
  2)if...else:2条路
  3)if...else if:多条路
  4)switch...case:多条路
    优点:效率高、结构清晰
    缺点:整数、相等
    break:跳出switch


1)满500打8折
2)满500打8折，不满500打9折
3)满1000打7折，
   500到999打8折
    不满500打9折


int a=5,b=8;
int max=a>b?a:b;

if(a>b){
  max=a;
  ...
  ...
  ...
}else{
  max=b;
  ...
  ...
  ...
}
System.out.println("请输入第一个数:");
int a = scan.nextInt();
System.out.println("请输入第二个数:");
int b = scan.nextInt();


System.out.println("请输入两个数:");
int a = scan.nextInt();
int b = scan.nextInt();

5
6
5 6
5        6
int a=8,b=55; //a=5,b=8(升序)
if(a>b){
  int t=a;
  a=b;
  b=t;
}
//若a>b则换，保证a<b


int a=8,b=5,c=3,d=1; //a=3,b=5,c=8

若a>b则换，保证a<b
若a>c则换，保证a<c
若a>d则换，保证a<d
若b>c则换，保证b<c
若b>d则换，保证b<d
若c>d则换，保证c<d

1/3/5/7/8/10/12--------31天
4/6/9/11---------------30天
2----------------------28/29天















笔记:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所改变的那个量
3.循环结构:
  1)while结构:先判断后执行，有可能一次也不执行
  2)do...while结构:先执行后判断，至少执行一次
                   第1要素与第3要素相同时，首选
  3)for结构:应用率最高
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环
Addition

int score=0;
for(int i=1;i<=10;i++){ //循环10次
  //出题
  //答题
  //判题
}
System.out.println("score="+score);

数----0到99

(1).5+10=?
算吧!
15
答对了

(2).9+8=?
算吧!
15
答错了

(3).56+23=?
算吧!
79
答对了
















int times=0; //1
while(times<10){ //2
  System.out.println("行动是成功的阶梯"); //4
  times++; //3
}
System.out.println("over");
12432432432432432
12432432432432432

//  1               2          3
for(int times=0 ; times<10 ; times++){
  System.out.println("行动是成功的阶梯"); //4
}
System.out.println("over");
12432432432432432











int a = 250;
int a = scan.nextInt();
int a = ?;

1到1000




Math.random()-------0.0到0.999999999...
(int)---------------0到0
*1000---------------0.0到999.9999999...
+1------------------1到1000










Math.random()-------0.0到0.999999999...
*1000---------------0.0到999.9999999...
(int)---------------0到999
+1------------------1到1000










Math.random()-------0.0到0.999999999...
*1000---------------0.0到999.9999999...
+1------------------1.0到1000.999999...
(int)---------------1到1000




















int num=250; //藏起来的数

循环变量:用户猜的那个数guess
1)System.out.println("猜吧!");
  int guess = scan.nextInt();
2)guess!=num
3)System.out.println("猜吧!");
  guess = scan.nextInt();

if(guess==0){
  break;
}

Guessing

猜吧!
300
太大了

猜吧!
200
太小了

猜吧!
249
太小了

猜吧!
250
恭喜你，猜对了
















WhileDemo










循环变量:圈数count
1)int count=0;
2)count<3
3)count++;

                      圈数为0
够3圈吗? 不够 跑一圈  圈数为1
够3圈吗? 不够 跑一圈  圈数为2
够3圈吗? 不够 跑一圈  圈数为3
够3圈吗? 够了










                        次数为0
够10次吗？不够 输出一次 次数为1
够10次吗？不够 输出一次 次数为2
够10次吗？不够 输出一次 次数为3
够10次吗？不够 输出一次 次数为4
够10次吗？不够 输出一次 次数为5
够10次吗？不够 输出一次 次数为6
够10次吗？不够 输出一次 次数为7
够10次吗？不够 输出一次 次数为8
够10次吗？不够 输出一次 次数为9
够10次吗？不够 输出一次 次数为10
够10次吗？够了

循环变量:次数times
1)int times=0;
2)times<10
3)times++;




两个案例:
1)输出10次"行动是成功的阶梯"
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
    行动是成功的阶梯
2)输出9的乘法表
    1*9=9
    2*9=18
    3*9=27
    ...
    8*9=72
    9*9=81

循环变量:乘数num
1)int num=1;
2)num<=9
3)num++;









循环-----反复


任何复杂的程序都可以通过三种结构来实现:
1.顺序结构:从上往下逐行执行，每句必走
2.分支结构:有条件的执行某语句一次，并非每句必走
3.循环结构:有条件的执行某语句多次，并非每句必走


while(boolean){ //循环
  语句块
}
System.out.println("over");


if(boolean){ //分支
  语句块
}
System.out.println("over");





