回顾:
1.循环:反复执行一段相同或相似的代码
2.循环三要素:
  1)循环变量的初始化
  2)循环的条件(以循环变量为基础)
  3)循环变量的改变(向着循环的结束变)
  循环变量:在循环过程中所改变的那个量
3:循环结构:
  1)while:先判断后执行，有可能一次都不执行
  2)do...while:先执行后判断，至少执行一次
               第1要素与第3要素相同时首选
  3)for:应用率最高
4.break:跳出循环
  continue:跳过循环体中剩余语句而进入下一次循环

int i=0;
while(i<10){
  i++;
}
System.out.println(i); //10

int i;
for(i=0;i<10;i++){
}
System.out.println(i); //10













笔记:
1.三种循环的更佳适用情况:
  1)while:"当...."循环
  2)do...while:"直到...."循环
               第1要素与第3要素相同时首选
  3)for:固次次数循环--应用率最高
2.嵌套循环:
  1)循环中套循环，外层控制行，内层控制列
    一般情况下，多行多列时使用
  2)执行规则:外层走一次，内层走所有次
  3)嵌套层数越少越好，能用一层就不用两层，能用两层就不用三层
    层数超过三层，说明设计有问题
  4)break只能跳出当前一层循环
3.程序=算法+数据结构
  1)算法:解决问题的流程/步骤(顺序、分支、循环)
  2)数据结构:将数据按照某种特定的结构来保存
             数怎么存
  设计良好的数据结构会导致好的算法
4.数组:
  1)相同数据类型元素的集合
  2)是一种数据类型(引用类型)
  3)数组的定义:
      int[] arr = new int[4];
  4)数组的初始化:
      int[] arr = new int[4]; //0,0,0,0
      int[] arr = {1,4,7,9};  //1,4,7,9
      int[] arr = new int[]{1,4,7,9}; //1,4,7,9
      int[] arr;
      arr = {1,4,7,9}; //编译错误，此方式只能声明同时初始化
      arr = new int[]{1,4,7,9}; //正确
  5)数组的访问:
        int[] arr = new int[3];
    5.1)通过数组名.length可以获取数组的长度
        System.out.println(arr.length); //3
    5.2)通过下标访问数组中的元素
        下标从0开始，最大到数组名.length-1
        arr[0]=100;
	arr[1]=200;
	arr[2]=300;
	arr[3]=800; //数组下标越界异常
	System.out.println(arr[arr.length-1]);
  6)数组的遍历:
      int[] arr = new int[4];
      for(int i=0;i<arr.length;i++){
        arr[i] = 100;
      }
      for(int i=0;i<arr.length;i++){
        System.out.println(arr[i]);
      }
      for(int i=arr.length-1;i>=0;i--){
        System.out.println(arr[i]);
      }
  7)数组的复制:
      System.arraycopy(a,1,a1,0,4);
      int[] a1 = Arrays.copyOf(a,6);
      a = Arrays.copyOf(a,a.length+1); //扩容
  8)数组的排序:
    8.1)Arrays.sort(arr);
    8.2)冒泡原理:
        8.2.1)四个数冒3轮
        8.2.2)每一轮都是从第1个数开始冒，
              每一次都是和它的下一个元素比
        8.2.3)冒出来的就不再参与比较了


BubbleSort
任务:
1.声明int型数组arr，包含10个元素
2.给数组中元素赋值为0到99之间的随机数
3.冒泡方式对arr升序排列
4.输出arr中每一个元素的值













    arr.length-1-i
i=0 比3次
i=1 比2次
i=2 比1次


int[] arr = {34,12,56,1}; //1,12,34,56
for(int i=0;i<arr.length-1;i++){ //控制轮
  for(int j=0;j<arr.length-1-i;j++){ //每轮的次数
    if(arr[j]>arr[j+1]){ //每次和它的下一个元素比
      int t=arr[j]; //交换
      arr[j]=arr[j+1];
      arr[j+1]=t;
    }
  }
}


第一轮:
  34和12比，换，12,34,56,1
  34和56比，不换
  56和1比，换，12,34,1,56----56冒出来了
第二轮:
  12和34比，不换
  34和1比，换，12,1,34,56----34冒出来了
第三轮:
  12和1比，换，1,12,34,56----12冒出来了












数据不同，选择的排序算法应该也是不同的


10万个数据-----冒泡排序算法
10万个数据-----插入排序算法
10万个数据-----快速排序算法

Arrays.sort(arr); //升序排列


long a = System.currentTimeMillis();
冒泡排序算法
long b = System.currentTimeMillis();

System.out.println(b-a); //8000












好的数据结构会导致好的算法



100000个数:
a和b
a和c
a和d
b和c
b和d
c和d













import ....
Scanner scan = ...;
int age = ...;

scan.close(); //---------










int[] a = {10,20,30,40,50};
int[] b = new int[6]; //


for(int i=0;i<a.length;i++){
  b[i] = a[i];
}

b[0]=a[0];
b[1]=a[1];
b[2]=a[2];
b[3]=a[3];
b[4]=a[4];


















int[] arr = {8,34,56,3};
找最大值算法:
1.假设第1个数为最大值
  int max = arr[0];
2.遍历剩余元素，将剩余元素与max做对比，
  若大于max则修改max的值为较大的数
  for(int i=1;i<arr.length;i++){
    if(arr[i]>max){
      max=arr[i];
    }
  }
max=8/34/56















编译错误------检查语法

int a=5.678;

arr[4]=100;









char的默认值:
0------码
'0'----48


ArrayDemo







  i=3;
  i=2;
  i=1;
  i=0;
  i=-1;



1,6,3,2----1,6,3,2
       ----2,3,6,1



int[] arr = new int[4];
for(int i=0;i<arr.length;i++){
  arr[i]:代表arr中的每一个元素
  arr[i]=100; //将每个元素赋值为100
}

arr[0]=100;
arr[1]=100;
arr[2]=100;
arr[3]=100;

System.out.println(arr[0]);
System.out.println(arr[1]);
System.out.println(arr[2]);
System.out.println(arr[3]);












int[] arr = new int[3];
arr[0]----代表arr中的第1个元素(int)
arr[1]----代表arr中的第2个元素(int)

arr[1] = 100;


int a=0;
int b=0;
int c=0;
b=100;











//声明int型数组arr，包含4个元素
//每个元素都是int型，默认值为0
int[] arr = new int[4];

//声明double型数组dous，包含10个元素
//每个元素都是double型，默认值为0.0
double[] dous = new double[10];

//声明boolean型数组bs，包含26个元素
//每个元素都是boolean型，默认值为false
boolean[] bs = new boolean[26];















int   a = 5;
int[] a = new int[4];

















int   a; //声明整型变量，名为a
int[] a; //声明整型数组变量，名为a














1)一万本书按图书类别存
  找java编程思想-----------简单
2)一万本书按出版社存
  找java编程思想-----------复杂














一个需求，写代码实现(考虑效率)




笔试




软件是模拟现实生活的
i++ + i++ +i+ ++i-------零意义


保留字-----不建议使用
跳出所有层循环------只是你自己想当然的
实际应用中几乎没有这样的需求



6000000000
for(int i=1;i<=1000;i++){
  for(int j=1;j<=2000;j++){
    for(int k=1;k<=3000;k++){
      System.out.println(111);
      break;
    
    }
  }
}

i=1
  j=1
    k=30次
  j=2
    k=30次
i=2
  j=1/2/3/.../20
...
i=10
  j=1/2/3/.../20













MultiTable





1)知识点(练)
2)解决实际的问题----解题的思路(想)














