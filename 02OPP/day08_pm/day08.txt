面向对象

对象Object：业务领域中的一个个体
   软件中的对象是一组数据（操作数据的方法）
 
对象 也称为 实例

属性：对象中每个数据，称为对象属性也是
   实例变量
   在类中声明了对象的属性

类：作为创建对象的模板，大量创建对象
   可以做到代码的复用
   
构造器：用于初始化属性，用于重用对象属性的
  初始化过程。
语法（规定）：
  1 方法名与类名一致
  2 不能定义返回值
  3 可以重载
  4 自动生成默认构造器

方法：
  1 对象的行为（功能）
  2 功能通过计算实现的（算法）
  3 好处：算法重用

面向对象:
  类：名词
  对象：个体
  引用：代词
  方法：动词

如何使用面向对象：面向对象的软件分析方法
  1 找到业务领域中的对象
  2 用数据描写业务中的对象（找属性）
  3 设计类，对象的模板，包含对象属性

类
class 类名{
  //类体 class body
  
  //属性

  //构造器

  //方法
}

class Cell{
  int row;//属性
  int col;
  
  //初始化对象的前提条件（数据）
  //作为构造器参数
  // 初始化一个格子的前提条件是格子的位置
  public Cell(int r, int c){
    //构造器的方法体
    row = r;
    col = c;
  }

  //方法：一旦有返回值，是计算过程
  public void drop(){
    //算法：输入数据，计算过程 计算结果
    //        in        process   out
    //方法中输入数据的来源：
    //  方法的参数
    //  对象的属性
    row++;
  }


}



class Airplane{
  int w;
  int h;
  int x;
  int y; 
  //第一次创建飞机时候调用构造器
  public Airplane(){
    w = 38;
    h = 62;
    y = -h;
    x = (int)(Math.random()*(480-w));//0~(480-w)
  }
  //飞行方法
  public void move(){
    y++;
  }

}
 
T t = new T();

class Cell{
  int row;
  int col;
  public Cell(int r, int c){
    row = r;
    col = c;
  }
}
class T{
  Cell c1;
  Cell c2;
  Cell c3;
  Cell c4;
  public T(){
    c1 = new Cell(0,3);
    c2 = new Cell(0,4);
    c3 = new Cell(0,5);
    c4 = new Cell(1,4);
  }
}






