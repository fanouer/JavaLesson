class Point{
  private int x;
  private int y;
  public Point(int x, int y){
    this.x = x;
    this.y = y;
  }
  //属性的读取方法（获取方法）
  //public int getX(){
  //  return x;
  //}
  public void setX(int x){
    this.x = x;
  }
}

main(){
  Point p = new Point(5,0);
  //p.x = 5;//编译错误
  //显示 x的值？
  //println(p.x); 不能直接读x
  println(p.getX());
}

封装：
  1 利用private、protected 修饰属性或者
  方法，使属性和方法在一定范围内访问
  2 方法封装算法，使短发能够重用
  3 类封装了数据和方法

static 变量（静态属性）
  1 是属于类的变量，全体类的实例共享的变量
  2 类加载期间，在方法区分配内存，
    软件运行期间，只有“一份”
  3 一般使用类名进行访问
     类名.静态变量名
    在类中，可以省略"类名."
  4 在软件中，用于存储唯一的一份数据时候
    使用。经常用于存储“单例”对象！
    比如：飞机大战的“天空”对象！

  class World{
     static Sky sky;
  }
  class Sky{
  }

 static 静态方法
   1 静态方法是属于类的方法
   2 使用类名调用
      类名.方法名()
   3 静态方法与非静态方法（对象的方法）
     的区别！
     在静态方法中没有隐含参数this！
     因为调用方法时候没有当前对象！
   4 静态方法不能使用当前对象的属性数据
   
   5 如何使用这两种方法
     1） 当一个方法的计算过程用到了当前
       对象(this)的数据，这个方法就应该
       定义为对象的方法（非静态方法）
     2) 如果一个方法的计算过程没有用到
       当前对象(this)的数据，就可以定义为
       静态方法了！

   静态方法和非静态方法都是算法，可以做
   相同的事情：非静态方法隐含传递了this
   使用更加方法，更加常用！当算法没有
   使用this中的数据时候，就定义为静态的！

   比如：Math.sqrt(参数) 开平方
   
   工具方法，工厂方法。
   

     调用对象方法：
     Foo foo = new Foo();
     foo.f(); //调用对象
     //原理：f(foo)

     //调用静态方法没有当前对象！
     Foo.test(); 
     
 class Foo{
   int a = 5;
   public static void test(){
     //静态方法中没有隐含参数this!
     //静态方法不能访问当前对象的属性/方法
     System.out.println("test()");
   }
   public void f(/* Foo this */){
     //在对象方法中，存在变量this
     // 代表调用方法的当前对象!
     //this.a
     System.out.println("f()"+this.a);
   }
 }
 
 Foo.test();

 静态代码块
  类中可以声明静态代码块
   1） 静态代码块，在类加载期间执行
     类只加载一次，静态代码块只能执行一次
   2) 使用场合：用于初始化静态的一次性资源

 class Sky{
    static Image img;   
    static{
      //读取图片文件到img 变量
    }
 }





















